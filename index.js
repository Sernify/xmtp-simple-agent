import { Agent } from '@xmtp/agent-sdk';
import { getTestUrl } from '@xmtp/agent-sdk/debug';
import { ethers } from 'ethers';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
const NETWORKS = {
  ethereum: {
    name: 'Ethereum',
    rpc: 'https://eth.llamarpc.com',
    explorer: 'https://etherscan.io'
  },
  sepolia: {
    name: 'Sepolia',
    rpc: process.env.ALCHEMY_RPC_URL || 'https://eth-sepolia.g.alchemy.com/v2/demo',
    explorer: 'https://sepolia.etherscan.io'
  },
  polygon: {
    name: 'Polygon',
    rpc: 'https://polygon-rpc.com',
    explorer: 'https://polygonscan.com'
  },
  arbitrum: {
    name: 'Arbitrum',
    rpc: 'https://arb1.arbitrum.io/rpc',
    explorer: 'https://arbiscan.io'
  },
  optimism: {
    name: 'Optimism',
    rpc: 'https://mainnet.optimism.io',
    explorer: 'https://optimistic.etherscan.io'
  },
  base: {
    name: 'Base',
    rpc: 'https://mainnet.base.org',
    explorer: 'https://basescan.org'
  }
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userData = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const providers = {};
for (const [key, config] of Object.entries(NETWORKS)) {
  providers[key] = new ethers.JsonRpcProvider(config.rpc);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserData(address) {
  if (!userData.has(address)) {
    userData.set(address, {
      wallets: [],
      transactions: [],
      monitoring: false
    });
  }
  return userData.get(address);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
function isValidAddress(address) {
  return ethers.isAddress(address);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async function getBalance(address, network) {
  try {
    const provider = providers[network];
    const balance = await provider.getBalance(address);
    return ethers.formatEther(balance);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${network}:`, error);
    return '0';
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function getRecentTransactions(address, network) {
  try {
    const provider = providers[network];
    const currentBlock = await provider.getBlockNumber();
    const transactions = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–ª–æ–∫–æ–≤
    for (let i = 0; i < 10; i++) {
      const block = await provider.getBlock(currentBlock - i, true);
      if (!block || !block.transactions) continue;
      
      for (const tx of block.transactions) {
        if (tx.from?.toLowerCase() === address.toLowerCase() ||
            tx.to?.toLowerCase() === address.toLowerCase()) {
          transactions.push({
            hash: tx.hash,
            from: tx.from,
            to: tx.to,
            value: ethers.formatEther(tx.value || 0),
            gasPrice: tx.gasPrice ? ethers.formatUnits(tx.gasPrice, 'gwei') : '0',
            network: network,
            timestamp: block.timestamp,
            type: tx.from?.toLowerCase() === address.toLowerCase() ? 'sent' : 'received'
          });
        }
      }
    }
    
    return transactions;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${network}:`, error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function getTransactionFee(txHash, network) {
  try {
    const provider = providers[network];
    const receipt = await provider.getTransactionReceipt(txHash);
    if (!receipt) return '0';
    
    const gasUsed = receipt.gasUsed;
    const tx = await provider.getTransaction(txHash);
    const gasPrice = tx.gasPrice || 0n;
    
    const fee = gasUsed * gasPrice;
    return ethers.formatEther(fee);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏:`, error);
    return '0';
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
async function monitorWallet(address, network, agent, userAddress) {
  const user = getUserData(userAddress);
  
  try {
    const provider = providers[network];
    let lastBlock = await provider.getBlockNumber();
    
    const checkInterval = setInterval(async () => {
      try {
        const currentBlock = await provider.getBlockNumber();
        
        if (currentBlock > lastBlock) {
          for (let i = lastBlock + 1; i <= currentBlock; i++) {
            const block = await provider.getBlock(i, true);
            if (!block || !block.transactions) continue;
            
            for (const tx of block.transactions) {
              if (tx.from?.toLowerCase() === address.toLowerCase() ||
                  tx.to?.toLowerCase() === address.toLowerCase()) {
                
                const fee = await getTransactionFee(tx.hash, network);
                const value = ethers.formatEther(tx.value || 0);
                const type = tx.from?.toLowerCase() === address.toLowerCase() ? 'sent' : 'received';
                
                const txData = {
                  hash: tx.hash,
                  from: tx.from,
                  to: tx.to,
                  value: value,
                  fee: fee,
                  network: network,
                  timestamp: Date.now(),
                  type: type
                };
                
                user.transactions.push(txData);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const message = `üîî –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n\n` +
                  `–°–µ—Ç—å: ${NETWORKS[network].name}\n` +
                  `–¢–∏–ø: ${type === 'sent' ? 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : 'üì• –ü–æ–ª—É—á–µ–Ω–æ'}\n` +
                  `–°—É–º–º–∞: ${value} ETH\n` +
                  `–ö–æ–º–∏—Å—Å–∏—è: ${fee} ETH\n` +
                  `–û—Ç: ${tx.from?.slice(0, 10)}...\n` +
                  `–ö–æ–º—É: ${tx.to?.slice(0, 10)}...\n` +
                  `Hash: ${tx.hash}\n` +
                  `Explorer: ${NETWORKS[network].explorer}/tx/${tx.hash}`;
                
                // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${userAddress}: ${message}`);
              }
            }
          }
          lastBlock = currentBlock;
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ${network}:`, error);
      }
    }, 15000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è ${network}:`, error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateStats(transactions, period) {
  const now = Date.now();
  let startTime;
  
  switch (period) {
    case 'today':
      startTime = now - 24 * 60 * 60 * 1000;
      break;
    case 'week':
      startTime = now - 7 * 24 * 60 * 60 * 1000;
      break;
    case 'month':
    case 'september':
    case 'october':
    case 'november':
    case 'december':
    case 'january':
    case 'february':
    case 'march':
    case 'april':
    case 'may':
    case 'june':
    case 'july':
    case 'august':
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –º–µ—Å—è—Ü–∞
      startTime = now - 30 * 24 * 60 * 60 * 1000;
      break;
    case 'year':
      startTime = now - 365 * 24 * 60 * 60 * 1000;
      break;
    default:
      startTime = 0;
  }
  
  const filtered = transactions.filter(tx => tx.timestamp >= startTime);
  
  let totalReceived = 0;
  let totalSent = 0;
  let totalFees = 0;
  
  filtered.forEach(tx => {
    const value = parseFloat(tx.value);
    const fee = parseFloat(tx.fee);
    
    if (tx.type === 'received') {
      totalReceived += value;
    } else {
      totalSent += value;
    }
    totalFees += fee;
  });
  
  return {
    period,
    transactions: filtered.length,
    received: totalReceived.toFixed(6),
    sent: totalSent.toFixed(6),
    fees: totalFees.toFixed(6),
    netChange: (totalReceived - totalSent - totalFees).toFixed(6)
  };
}

// –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
const agent = await Agent.createFromEnv({
  env: 'dev',
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
agent.on('text', async (ctx) => {
  const message = ctx.message.content.trim();
  const userAddr = ctx.message.senderAddress;
  const user = getUserData(userAddr);
  
  // –ö–æ–º–∞–Ω–¥–∞ /start
  if (message.toLowerCase().startsWith('/start') || message.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç')) {
    await ctx.sendText(
      'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≥–µ–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∫–æ–º–∏—Å—Å–∏–π.\n\n' +
      'üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/add <–∞–¥—Ä–µ—Å> - –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n' +
      '/wallets - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏\n' +
      '/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã\n' +
      '/stats <–ø–µ—Ä–∏–æ–¥> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (today/week/month/year)\n' +
      '/history - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n' +
      '/help - –ü–æ–º–æ—â—å\n\n' +
      '–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:\n' +
      '/add 0xYourAddress'
    );
    return;
  }
  
  // –ö–æ–º–∞–Ω–¥–∞ /help
  if (message.toLowerCase().startsWith('/help')) {
    await ctx.sendText(
      'üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å:\n\n' +
      '1Ô∏è‚É£ /add <–∞–¥—Ä–µ—Å> - –î–æ–±–∞–≤–∏—Ç—å EVM –∫–æ—à–µ–ª–µ–∫\n' +
      '   –ü—Ä–∏–º–µ—Ä: /add 0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb\n\n' +
      '2Ô∏è‚É£ /wallets - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\n\n' +
      '3Ô∏è‚É£ /balance - –ë–∞–ª–∞–Ω—Å—ã –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö\n\n' +
      '4Ô∏è‚É£ /stats <–ø–µ—Ä–∏–æ–¥> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥\n' +
      '   –ü–µ—Ä–∏–æ–¥—ã: today, week, month, september, year\n' +
      '   –ü—Ä–∏–º–µ—Ä: /stats month\n\n' +
      '5Ô∏è‚É£ /history - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n' +
      '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:\n' +
      '‚Ä¢ Ethereum ‚Ä¢ Sepolia ‚Ä¢ Polygon\n' +
      '‚Ä¢ Arbitrum ‚Ä¢ Optimism ‚Ä¢ Base'
    );
    return;
  }
  
  // –ö–æ–º–∞–Ω–¥–∞ /add
  if (message.toLowerCase().startsWith('/add')) {
    const parts = message.split(' ');
    if (parts.length < 2) {
      await ctx.sendText('‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n/add 0xYourAddress');
      return;
    }
    
    const address = parts[1].trim();
    if (!isValidAddress(address)) {
      await ctx.sendText('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
      return;
    }
    
    if (user.wallets.includes(address.toLowerCase())) {
      await ctx.sendText('‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.');
      return;
    }
    
    user.wallets.push(address.toLowerCase());
    user.monitoring = true;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
    for (const network of Object.keys(NETWORKS)) {
      monitorWallet(address.toLowerCase(), network, agent, userAddr);
    }
    
    await ctx.sendText(
      `‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
      `üìç –ê–¥—Ä–µ—Å: ${address}\n` +
      `üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö\n\n` +
      `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö!`
    );
    return;
  }
  
  // –ö–æ–º–∞–Ω–¥–∞ /wallets
  if (message.toLowerCase().startsWith('/wallets')) {
    if (user.wallets.length === 0) {
      await ctx.sendText('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫: /add 0xYourAddress');
      return;
    }
    
    let response = 'üíº –í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n\n';
    user.wallets.forEach((wallet, index) => {
      response += `${index + 1}. ${wallet}\n`;
    });
    response += '\nüîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ' + (user.monitoring ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω');
    
    await ctx.sendText(response);
    return;
  }
  
  // –ö–æ–º–∞–Ω–¥–∞ /balance
  if (message.toLowerCase().startsWith('/balance')) {
    if (user.wallets.length === 0) {
      await ctx.sendText('üì≠ –î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: /add 0xYourAddress');
      return;
    }
    
    await ctx.sendText('‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã...');
    
    let response = 'üí∞ –ë–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤:\n\n';
    
    for (const wallet of user.wallets) {
      response += `üìç ${wallet.slice(0, 10)}...${wallet.slice(-8)}\n`;
      
      for (const [key, config] of Object.entries(NETWORKS)) {
        const balance = await getBalance(wallet, key);
        response += `  ${config.name}: ${parseFloat(balance).toFixed(4)} ETH\n`;
      }
      response += '\n';
    }
    
    await ctx.sendText(response);
    return;
  }
  
  // –ö–æ–º–∞–Ω–¥–∞ /stats
  if (message.toLowerCase().startsWith('/stats')) {
    if (user.transactions.length === 0) {
      await ctx.sendText('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: /add 0xYourAddress');
      return;
    }
    
    const parts = message.split(' ');
    const period = parts.length > 1 ? parts[1].toLowerCase() : 'month';
    
    const stats = calculateStats(user.transactions, period);
    
    const response = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${period}:\n\n` +
      `üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.transactions}\n` +
      `üì• –ü–æ–ª—É—á–µ–Ω–æ: ${stats.received} ETH\n` +
      `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sent} ETH\n` +
      `‚õΩ –ö–æ–º–∏—Å—Å–∏–∏: ${stats.fees} ETH\n` +
      `üíµ –ß–∏—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stats.netChange} ETH\n\n` +
      `${parseFloat(stats.netChange) >= 0 ? '‚úÖ –ü—Ä–∏–±—ã–ª—å' : '‚ö†Ô∏è –£–±—ã—Ç–æ–∫'}`;
    
    await ctx.sendText(response);
    return;
  }
  
  // –ö–æ–º–∞–Ω–¥–∞ /history
  if (message.toLowerCase().startsWith('/history')) {
    if (user.transactions.length === 0) {
      await ctx.sendText('üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫: /add 0xYourAddress');
      return;
    }
    
    const recent = user.transactions.slice(-5).reverse();
    let response = 'üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n';
    
    recent.forEach((tx, index) => {
      response += `${index + 1}. ${tx.type === 'sent' ? 'üì§' : 'üì•'} ${NETWORKS[tx.network].name}\n` +
        `   –°—É–º–º–∞: ${tx.value} ETH\n` +
        `   –ö–æ–º–∏—Å—Å–∏—è: ${tx.fee} ETH\n` +
        `   Hash: ${tx.hash.slice(0, 10)}...\n\n`;
    });
    
    await ctx.sendText(response);
    return;
  }
  
  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
  await ctx.sendText(
    '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n' +
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
  );
});

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
agent.on('start', () => {
  console.log('üöÄ Transaction Tracker Agent –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üì¨ –ê–¥—Ä–µ—Å –∞–≥–µ–Ω—Ç–∞: ${agent.address}`);
  console.log(`üîó –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: ${getTestUrl(agent.client)}`);
  console.log('‚è≥ –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...');
  console.log(`üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏: ${Object.keys(NETWORKS).join(', ')}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
agent.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞:', error);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
await agent.start();
