import { Agent } from '@xmtp/agent-sdk';
import { getTestUrl } from '@xmtp/agent-sdk/debug';
import { ethers } from 'ethers';

// API –∫–ª—é—á–∏
const ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY || 'mRihUxWF22AZILcoI3b3V';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
const NETWORKS = {
  sepolia: {
    name: 'Sepolia Testnet',
    rpc: `https://eth-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}`,
    explorer: 'https://sepolia.etherscan.io',
    chainId: 11155111,
    nativeCurrency: 'ETH'
  },
  ethereum: {
    name: 'Ethereum',
    rpc: `https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`,
    explorer: 'https://etherscan.io',
    chainId: 1,
    nativeCurrency: 'ETH'
  },
  polygon: {
    name: 'Polygon',
    rpc: `https://polygon-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`,
    explorer: 'https://polygonscan.com',
    chainId: 137,
    nativeCurrency: 'MATIC'
  },
  arbitrum: {
    name: 'Arbitrum',
    rpc: `https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`,
    explorer: 'https://arbiscan.io',
    chainId: 42161,
    nativeCurrency: 'ETH'
  },
  optimism: {
    name: 'Optimism',
    rpc: `https://opt-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`,
    explorer: 'https://optimistic.etherscan.io',
    chainId: 10,
    nativeCurrency: 'ETH'
  },
  base: {
    name: 'Base',
    rpc: `https://base-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}`,
    explorer: 'https://basescan.org',
    chainId: 8453,
    nativeCurrency: 'ETH'
  }
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const userData = new Map();
const monitoringIntervals = new Map();
let agentInstance = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const providers = {};
for (const [key, config] of Object.entries(NETWORKS)) {
  providers[key] = new ethers.JsonRpcProvider(config.rpc);
}

function getUserData(address) {
  if (!userData.has(address)) {
    userData.set(address, {
      wallets: [],
      transactions: [],
      monitoring: false,
      lastCheckedBlock: {},
      conversationAddress: address
    });
  }
  return userData.get(address);
}

function isValidAddress(address) {
  return ethers.isAddress(address);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Alchemy API
async function fetchTransactionHistory(walletAddress, network) {
  try {
    const provider = providers[network];
    const config = NETWORKS[network];
    
    console.log(`üì° –ü–æ–ª—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${walletAddress} –≤ ${network}...`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Alchemy API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    const currentBlock = await provider.getBlockNumber();
    const fromBlock = Math.max(0, currentBlock - 10000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10000 –±–ª–æ–∫–æ–≤
    
    const transactions = [];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –° —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    const sentTxs = await provider.send('alchemy_getAssetTransfers', [{
      fromBlock: `0x${fromBlock.toString(16)}`,
      toBlock: 'latest',
      fromAddress: walletAddress,
      category: ['external', 'internal'],
      withMetadata: true,
      excludeZeroValue: false
    }]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ù–ê —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
    const receivedTxs = await provider.send('alchemy_getAssetTransfers', [{
      fromBlock: `0x${fromBlock.toString(16)}`,
      toBlock: 'latest',
      toAddress: walletAddress,
      category: ['external', 'internal'],
      withMetadata: true,
      excludeZeroValue: false
    }]);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for (const tx of sentTxs.transfers || []) {
      const receipt = await provider.getTransactionReceipt(tx.hash);
      const transaction = await provider.getTransaction(tx.hash);
      
      if (receipt && transaction) {
        const gasUsed = receipt.gasUsed;
        const gasPrice = transaction.gasPrice || 0n;
        const fee = ethers.formatEther(gasUsed * gasPrice);
        const block = await provider.getBlock(receipt.blockNumber);
        
        transactions.push({
          hash: tx.hash,
          from: tx.from,
          to: tx.to,
          value: tx.value || '0',
          fee: fee,
          network: network,
          networkName: config.name,
          timestamp: block ? block.timestamp * 1000 : Date.now(),
          blockNumber: receipt.blockNumber,
          type: 'sent',
          currency: config.nativeCurrency
        });
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for (const tx of receivedTxs.transfers || []) {
      const receipt = await provider.getTransactionReceipt(tx.hash);
      const transaction = await provider.getTransaction(tx.hash);
      
      if (receipt && transaction) {
        const gasUsed = receipt.gasUsed;
        const gasPrice = transaction.gasPrice || 0n;
        const fee = ethers.formatEther(gasUsed * gasPrice);
        const block = await provider.getBlock(receipt.blockNumber);
        
        transactions.push({
          hash: tx.hash,
          from: tx.from,
          to: tx.to,
          value: tx.value || '0',
          fee: fee,
          network: network,
          networkName: config.name,
          timestamp: block ? block.timestamp * 1000 : Date.now(),
          blockNumber: receipt.blockNumber,
          type: 'received',
          currency: config.nativeCurrency
        });
      }
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ ${network}`);
    return transactions;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${network}:`, error.message);
    return [];
  }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
async function monitorWalletRealtime(walletAddress, network, userAddress) {
  const user = getUserData(userAddress);
  const provider = providers[network];
  const config = NETWORKS[network];
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–ª–æ–∫
    if (!user.lastCheckedBlock[network]) {
      user.lastCheckedBlock[network] = await provider.getBlockNumber();
    }
    
    console.log(`üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${walletAddress} –≤ ${network}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –∫–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥
    const intervalId = setInterval(async () => {
      try {
        const currentBlock = await provider.getBlockNumber();
        const lastChecked = user.lastCheckedBlock[network];
        
        if (currentBlock > lastChecked) {
          console.log(`üîé –ü—Ä–æ–≤–µ—Ä—è—é –±–ª–æ–∫–∏ ${lastChecked + 1} - ${currentBlock} –≤ ${network}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –±–ª–æ–∫
          for (let blockNum = lastChecked + 1; blockNum <= currentBlock; blockNum++) {
            const block = await provider.getBlock(blockNum, true);
            
            if (!block || !block.transactions) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–ª–æ–∫–µ
            for (const txHash of block.transactions) {
              const tx = await provider.getTransaction(txHash);
              if (!tx) continue;
              
              const fromMatch = tx.from?.toLowerCase() === walletAddress.toLowerCase();
              const toMatch = tx.to?.toLowerCase() === walletAddress.toLowerCase();
              
              if (fromMatch || toMatch) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${txHash}`);
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const receipt = await provider.getTransactionReceipt(txHash);
                if (!receipt) continue;
                
                const gasUsed = receipt.gasUsed;
                const gasPrice = tx.gasPrice || 0n;
                const fee = ethers.formatEther(gasUsed * gasPrice);
                const value = ethers.formatEther(tx.value || 0n);
                
                const txData = {
                  hash: tx.hash,
                  from: tx.from,
                  to: tx.to,
                  value: value,
                  fee: fee,
                  network: network,
                  networkName: config.name,
                  timestamp: Date.now(),
                  blockNumber: receipt.blockNumber,
                  type: fromMatch ? 'sent' : 'received',
                  currency: config.nativeCurrency,
                  gasUsed: gasUsed.toString(),
                  gasPrice: ethers.formatUnits(gasPrice, 'gwei')
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                user.transactions.push(txData);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await sendTransactionNotification(userAddress, txData);
              }
            }
          }
          
          user.lastCheckedBlock[network] = currentBlock;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–∞ –≤ ${network}:`, error.message);
      }
    }, 12000); // –ö–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const key = `${userAddress}-${walletAddress}-${network}`;
    if (!monitoringIntervals.has(key)) {
      monitoringIntervals.set(key, []);
    }
    monitoringIntervals.get(key).push(intervalId);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ${network}:`, error.message);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function sendTransactionNotification(userAddress, tx) {
  if (!agentInstance) return;
  
  try {
    const emoji = tx.type === 'sent' ? 'üì§' : 'üì•';
    const typeText = tx.type === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ü–æ–ª—É—á–µ–Ω–æ';
    
    const message = 
      `üîî –ù–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê!\n\n` +
      `${emoji} –¢–∏–ø: ${typeText}\n` +
      `üåê –°–µ—Ç—å: ${tx.networkName}\n` +
      `üí∞ –°—É–º–º–∞: ${tx.value} ${tx.currency}\n` +
      `‚õΩ –ö–æ–º–∏—Å—Å–∏—è: ${tx.fee} ${tx.currency}\n` +
      `‚ö° Gas Used: ${tx.gasUsed}\n` +
      `üíµ Gas Price: ${tx.gasPrice} Gwei\n\n` +
      `üìç –û—Ç: ${tx.from}\n` +
      `üìç –ö–æ–º—É: ${tx.to}\n\n` +
      `üîó –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n${NETWORKS[tx.network].explorer}/tx/${tx.hash}`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
    const conversations = await agentInstance.client.conversations.list();
    const conversation = conversations.find(c => 
      c.peerAddress.toLowerCase() === userAddress.toLowerCase()
    );
    
    if (conversation) {
      await conversation.send(message);
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userAddress}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async function getBalance(address, network) {
  try {
    const provider = providers[network];
    const balance = await provider.getBalance(address);
    return ethers.formatEther(balance);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${network}:`, error.message);
    return '0';
  }
}

// –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateStats(transactions, period) {
  const now = Date.now();
  let startTime;
  
  const monthNames = {
    'january': 0, 'february': 1, 'march': 2, 'april': 3,
    'may': 4, 'june': 5, 'july': 6, 'august': 7,
    'september': 8, 'october': 9, 'november': 10, 'december': 11
  };
  
  if (monthNames[period.toLowerCase()] !== undefined) {
    const currentDate = new Date();
    const targetMonth = monthNames[period.toLowerCase()];
    const targetYear = targetMonth > currentDate.getMonth() ? 
      currentDate.getFullYear() - 1 : currentDate.getFullYear();
    
    const startDate = new Date(targetYear, targetMonth, 1);
    const endDate = new Date(targetYear, targetMonth + 1, 0, 23, 59, 59);
    startTime = startDate.getTime();
    
    const filtered = transactions.filter(tx => 
      tx.timestamp >= startTime && tx.timestamp <= endDate.getTime()
    );
    
    return computeStats(filtered, period);
  }
  
  switch (period.toLowerCase()) {
    case 'today':
      startTime = new Date().setHours(0, 0, 0, 0);
      break;
    case 'week':
      startTime = now - 7 * 24 * 60 * 60 * 1000;
      break;
    case 'month':
      startTime = now - 30 * 24 * 60 * 60 * 1000;
      break;
    case 'year':
      startTime = now - 365 * 24 * 60 * 60 * 1000;
      break;
    default:
      startTime = 0;
  }
  
  const filtered = transactions.filter(tx => tx.timestamp >= startTime);
  return computeStats(filtered, period);
}

function computeStats(transactions, period) {
  let totalReceived = 0;
  let totalSent = 0;
  let totalFees = 0;
  
  transactions.forEach(tx => {
    const value = parseFloat(tx.value);
    const fee = parseFloat(tx.fee);
    
    if (tx.type === 'received') {
      totalReceived += value;
    } else {
      totalSent += value;
      totalFees += fee;
    }
  });
  
  return {
    period,
    transactions: transactions.length,
    received: totalReceived.toFixed(6),
    sent: totalSent.toFixed(6),
    fees: totalFees.toFixed(6),
    netChange: (totalReceived - totalSent - totalFees).toFixed(6)
  };
}

// –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
const agent = await Agent.createFromEnv({
  env: 'dev',
});

agentInstance = agent;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
agent.on('text', async (ctx) => {
  const message = ctx.message.content.trim();
  const userAddr = ctx.message.senderAddress;
  const user = getUserData(userAddr);
  
  // /start
  if (message.toLowerCase().startsWith('/start') || message.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç')) {
    await ctx.sendText(
      'üëã –ü—Ä–∏–≤–µ—Ç! –Ø Transaction Tracker Agent!\n\n' +
      'üéØ –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–µ–¥—É —É—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π.\n\n' +
      'üìù –ö–æ–º–∞–Ω–¥—ã:\n' +
      '/add <–∞–¥—Ä–µ—Å> - –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n' +
      '/wallets - –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏\n' +
      '/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã\n' +
      '/stats <–ø–µ—Ä–∏–æ–¥> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      '/history - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n' +
      '/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å\n\n' +
      'üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: Ethereum, Sepolia, Polygon, Arbitrum, Optimism, Base\n\n' +
      'üí° –ù–∞—á–Ω–∏—Ç–µ —Å: /add 0x–í–∞—à–ê–¥—Ä–µ—Å'
    );
    return;
  }
  
  // /help
  if (message.toLowerCase().startsWith('/help')) {
    await ctx.sendText(
      'üìö –ü–û–î–†–û–ë–ù–ê–Ø –ü–û–ú–û–©–¨\n\n' +
      '1Ô∏è‚É£ /add <–∞–¥—Ä–µ—Å>\n' +
      '–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n' +
      '–ü—Ä–∏–º–µ—Ä: /add 0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb\n\n' +
      '2Ô∏è‚É£ /wallets\n' +
      '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏\n\n' +
      '3Ô∏è‚É£ /balance\n' +
      '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö\n\n' +
      '4Ô∏è‚É£ /stats <–ø–µ—Ä–∏–æ–¥>\n' +
      '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥\n' +
      '–ü–µ—Ä–∏–æ–¥—ã: today, week, month, year\n' +
      '–ò–ª–∏: september, october, november –∏ —Ç.–¥.\n' +
      '–ü—Ä–∏–º–µ—Ä: /stats september\n\n' +
      '5Ô∏è‚É£ /history\n' +
      '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n' +
      'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n' +
      '–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ –ö–ê–ñ–î–û–ô –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏!'
    );
    return;
  }
  
  // /add
  if (message.toLowerCase().startsWith('/add')) {
    const parts = message.split(' ');
    if (parts.length < 2) {
      await ctx.sendText('‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:\n/add 0xYourAddress');
      return;
    }
    
    const address = parts[1].trim();
    if (!isValidAddress(address)) {
      await ctx.sendText('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!');
      return;
    }
    
    if (user.wallets.includes(address.toLowerCase())) {
      await ctx.sendText('‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!');
      return;
    }
    
    await ctx.sendText('‚è≥ –î–æ–±–∞–≤–ª—è—é –∫–æ—à–µ–ª–µ–∫ –∏ –∑–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É.');
    
    user.wallets.push(address.toLowerCase());
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
    let totalTxCount = 0;
    for (const network of Object.keys(NETWORKS)) {
      const txHistory = await fetchTransactionHistory(address, network);
      user.transactions.push(...txHistory);
      totalTxCount += txHistory.length;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      monitorWalletRealtime(address.toLowerCase(), network, userAddr);
    }
    
    user.monitoring = true;
    
    await ctx.sendText(
      `‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
      `üìç –ê–¥—Ä–µ—Å: ${address}\n` +
      `üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTxCount}\n` +
      `üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö\n\n` +
      `üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ö–ê–ñ–î–û–ô –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n` +
      `/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n` +
      `/stats month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É`
    );
    return;
  }
  
  // /wallets
  if (message.toLowerCase().startsWith('/wallets')) {
    if (user.wallets.length === 0) {
      await ctx.sendText('üì≠ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n/add 0xYourAddress');
      return;
    }
    
    let response = 'üíº –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:\n\n';
    user.wallets.forEach((wallet, i) => {
      response += `${i + 1}. ${wallet}\n`;
    });
    response += `\nüîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${user.monitoring ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`;
    response += `\nüìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ: ${user.transactions.length}`;
    
    await ctx.sendText(response);
    return;
  }
  
  // /balance
  if (message.toLowerCase().startsWith('/balance')) {
    if (user.wallets.length === 0) {
      await ctx.sendText('üì≠ –î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫: /add 0xYourAddress');
      return;
    }
    
    await ctx.sendText('‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã...');
    
    let response = 'üí∞ –ë–ê–õ–ê–ù–°–´:\n\n';
    
    for (const wallet of user.wallets) {
      response += `üìç ${wallet.slice(0, 6)}...${wallet.slice(-4)}\n`;
      
      for (const [key, config] of Object.entries(NETWORKS)) {
        const balance = await getBalance(wallet, key);
        const bal = parseFloat(balance);
        if (bal > 0) {
          response += `  ${config.name}: ${bal.toFixed(6)} ${config.nativeCurrency}\n`;
        }
      }
      response += '\n';
    }
    
    await ctx.sendText(response);
    return;
  }
  
  // /stats
  if (message.toLowerCase().startsWith('/stats')) {
    if (user.transactions.length === 0) {
      await ctx.sendText('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫: /add 0xYourAddress');
      return;
    }
    
    const parts = message.split(' ');
    const period = parts.length > 1 ? parts[1].toLowerCase() : 'month';
    
    const stats = calculateStats(user.transactions, period);
    
    const response = 
      `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê ${period.toUpperCase()}\n\n` +
      `üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.transactions}\n` +
      `üì• –ü–æ–ª—É—á–µ–Ω–æ: ${stats.received} ETH\n` +
      `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sent} ETH\n` +
      `‚õΩ –ö–æ–º–∏—Å—Å–∏–∏: ${stats.fees} ETH\n` +
      `üíµ –ß–∏—Å—Ç–æ–µ: ${stats.netChange} ETH\n\n` +
      `${parseFloat(stats.netChange) >= 0 ? '‚úÖ –ü—Ä–∏–±—ã–ª—å' : '‚ö†Ô∏è –£–±—ã—Ç–æ–∫'}`;
    
    await ctx.sendText(response);
    return;
  }
  
  // /history
  if (message.toLowerCase().startsWith('/history')) {
    if (user.transactions.length === 0) {
      await ctx.sendText('üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫: /add 0xYourAddress');
      return;
    }
    
    const recent = user.transactions
      .sort((a, b) => b.timestamp - a.timestamp)
      .slice(0, 10);
    
    let response = `üìú –ü–û–°–õ–ï–î–ù–ò–ï ${recent.length} –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:\n\n`;
    
    recent.forEach((tx, i) => {
      const emoji = tx.type === 'sent' ? 'üì§' : 'üì•';
      const date = new Date(tx.timestamp).toLocaleString('ru-RU');
      
      response += 
        `${i + 1}. ${emoji} ${tx.networkName}\n` +
        `   ${tx.value} ${tx.currency}\n` +
        `   –ö–æ–º–∏—Å—Å–∏—è: ${tx.fee} ${tx.currency}\n` +
        `   ${date}\n` +
        `   ${NETWORKS[tx.network].explorer}/tx/${tx.hash}\n\n`;
    });
    
    await ctx.sendText(response);
    return;
  }
  
  await ctx.sendText('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help');
});

agent.on('start', () => {
  console.log('üöÄ Transaction Tracker Agent –ó–ê–ü–£–©–ï–ù!');
  console.log(`üì¨ –ê–¥—Ä–µ—Å: ${agent.address}`);
  console.log(`üîó –¢–µ—Å—Ç: ${getTestUrl(agent.client)}`);
  console.log(`üåê –°–µ—Ç–∏: ${Object.keys(NETWORKS).join(', ')}`);
  console.log('‚è≥ –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏–π...');
});

agent.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
});

await agent.start();
